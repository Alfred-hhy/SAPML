---


- debug:
    msg: "-> base only"
  tags: [print_action]

- name: Add or modify nofile soft limit
  become: True
  community.general.pam_limits:
    domain: ubuntu
    limit_type: soft
    limit_item: nofile
    value: 1048576

- name: reload
  become: True
  ansible.builtin.shell:
    cmd: sysctl -p

- name: "Remove autoupdater from ubuntu"
  become: True
  ansible.builtin.apt:
    pkg:
      - unattended-upgrades
    state: absent
    update_cache: yes

- name: "Install prerequisites for MP-SPDZ"
  become: True
  ansible.builtin.apt:
    pkg:
      - automake
      - build-essential
      - clang
      - git
      - libboost-dev
      - libboost-thread-dev
      - libboost-iostreams-dev
      - libboost-filesystem-dev
      - libntl-dev
      - libgmp-dev
      - libsodium-dev
      - libssl-dev
      - libtool
      - m4
      - python3
      - texinfo
      - cmake
      - yasm
      - pkg-config
      - libomp-dev
    update_cache: yes
    state: present

- name: Update CONFIG to customize player-data dir
  ansible.builtin.replace:
    path: "{{ mpspdz_dir }}/CONFIG"
    regexp: '-DPREP_DIR="Player-Prep-Data\/"'
    replace: '-DPREP_DIR="Player-Data/"'

- name: Remove old CONFIG.mine
  ansible.builtin.file:
    path: "{{ mpspdz_dir }}/CONFIG.mine"
    state: absent

- name: "Create Player-Data/ folder"
  ansible.builtin.file:
    path: "{{ mpspdz_dir }}/Player-Data"
    state: directory

- name: "Create Player-Prep-Data/ folder"
  ansible.builtin.file:
    path: "{{ mpspdz_dir }}/Player-Prep-Data"
    state: directory

- name: "Check if MP-SPDZ is compiled"
  ansible.builtin.stat:
    path: "{{ mpspdz_dir }}/semi2k-party.x"
  register: mpspdz_compiled

- name: "Ensure Player-SSL-Data exists"
  ansible.builtin.file:
    state: directory
    path: "{{ mpspdz_dir }}/Player-SSL-Data"

- name: "Check if SSL certificates are up to date (note: this checks validity on coordinator machine)"
  delegate_to: localhost
  openssl_certificate_info:
    path: "{{ does_project_dir }}/MP-SPDZ/Player-SSL-Data/P0.pem"

    valid_at:
      one_day: "+1d"
  register: result
  when: lookup( 'file', does_project_dir + '/MP-SPDZ/Player-SSL-Data/P0.pem', errors='ignore' )

- name: Generate SSL Certificates for 20 players locally if not exist yet
  delegate_to: localhost
  when: ('skipped' in result and result.skipped) or result.valid_at.one_day == False
  ansible.builtin.shell:
    chdir: "{{ does_project_dir }}"
    cmd: "bash {{ does_project_dir }}/MP-SPDZ/Scripts/setup-ssl.sh 20 MP-SPDZ/Player-SSL-Data/"

- name: Copy SSL Certificates
  ansible.builtin.copy:
    src: "{{ does_project_dir }}/MP-SPDZ/Player-SSL-Data/"
    dest: "{{ mpspdz_dir }}/Player-Data/"

- name: "Check if AWS CLI is installed"
  ansible.builtin.stat:
    path: "/usr/local/bin/aws"
  register: aws_cli_stat
- name: Setup awscli
  when: aws_cli_stat.stat.exists == False
  block:
    - name: Install packages
      become: True
      apt:
        pkg:
          - zip
        update_cache: yes

    - name: Download awscli
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unpack awscli
      ansible.builtin.unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Install awscli via shell
      become: True
      ansible.builtin.shell:
        chdir: /tmp
        cmd: ./aws/install
        creates: /usr/local/bin/aws

- name: Setup Input Folder
  ansible.builtin.file:
    path: "{{ dataset_dir }}"
    state: directory

- name: "Check if poetry is installed"
  ansible.builtin.stat:
    path: "/home/ubuntu/.local/bin/poetry"
  register: poetry_stat

- name: Install Poetry
  when: poetry_stat.stat.exists == False
  block:

    - name: Download get-pip.py
      ansible.builtin.get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py

    - name: Install pip for python (via script)
      ansible.builtin.shell:
        cmd: python3 /tmp/get-pip.py

    - name: Download install-poetry.py
      ansible.builtin.get_url:
        url: https://install.python-poetry.org/install-poetry.py
        dest: /tmp/install-poetry.py

    - name: Install poetry with script install-poetry.py
      ansible.builtin.shell:
        cmd: python3 /tmp/install-poetry.py

- name: make path to poetry available in variable
  set_fact:
    poetry: /home/ubuntu/.local/bin/poetry

- name: Set config to create .venv folder in project directory
  ansible.builtin.shell:
    cmd: "{{ poetry }} config virtualenvs.in-project true"

- name: Install poetry project if project exists
  ansible.builtin.shell:
    cmd: "{{poetry}} install"
    chdir: "{{ exp_code_dir }}"

- name: Make symbolic link from exp_code_dir/script_utils to Compiler folder of MP-SPDZ
  ansible.builtin.file:
    state: link
    path: "{{ mpspdz_dir }}/Compiler/script_utils"
    src: "{{ exp_code_dir }}/script_utils"
